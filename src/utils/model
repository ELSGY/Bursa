#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <sched.h>

/* Number of readers and how many times they read */
#define N 20
#define NLOOP 100
/* Number of writers and how many times they write */
#define M 10
#define MLOOP 100

/* shared resource; this will get read/written */
int value;
sem_t value_writer_sem;

/* how many readers are reading */
int readers = 0;
sem_t readers_sem;

void *reader_thread(void *);
void *writer_thread(void *);

int main() {
  pthread_t thrs[N + M];
  int thr_id[N + M];
  int i;
  pthread_mutexattr_t mutex_attr;

  sem_init(&value_writer_sem, 0, 1);
  sem_init(&readers_sem, 0, 1);

  for(i = 0; i < N; i++)
  {
    thr_id[i] = i;
    pthread_create(&thrs[i], NULL, reader_thread, (void *)&thr_id[i]);
  }
  for(i = N; i < N + M; i++)
  {
    thr_id[i] = i;
    pthread_create(&thrs[i], NULL, writer_thread, (void *)&thr_id[i]);
  }

  for(i = 0; i < N + M; i++)
    pthread_join(thrs[i], NULL);

  exit(0);
}

void *reader_thread(void *id) {
  int i;
  printf("Reader thread %d started!\n", *(int *)id);

  for(i = NLOOP; i--; )
  {
    sem_wait(&readers_sem);
    if(readers == 0) /* first reader */
    {
      sem_wait(&value_writer_sem);
    }
    readers++;
    sem_post(&readers_sem);

    printf("Reader %d has read value %d\n",
	   *(int *)id, value);

    sem_wait(&readers_sem);
    if(readers == 1) /* last reader */
    {
      sem_post(&value_writer_sem);
    }
    readers--;
    sem_post(&readers_sem);

    sched_yield();
  }

  pthread_exit(NULL);
}

void *writer_thread(void *id) {
  int i;
  printf("Writer thread %d started!\n", *(int *)id);

  for(i = MLOOP; i--; )
  {
    sem_wait(&value_writer_sem);
    value = *(int *)id;
    printf("Writer %d has written value %d\n",
	   *(int *)id, value);
    sem_post(&value_writer_sem);
    sched_yield();
  }

  pthread_exit(NULL);
}